services:

  db:
    image: postgres:17
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}

  minio:
    image: quay.io/minio/minio:RELEASE.2025-04-08T15-41-24Z
    restart: always
    networks:
      - default
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER?Variable not set}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD?Variable not set}
    volumes:
      - app-minio-data:/data
    command: server /data --console-address ":9002" --address ":9001"
    ports:
      - "9001:9001"
      - "9002:9002"

  adminer:
    image: adminer
    restart: always
    networks:
      - default
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=pepa-linha-dark
    ports:
      - "8085:8080"

  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - default
    ports:
      - "8086:8000"
    depends_on:
      db:
        condition: service_healthy
        restart: true
      minio:
        condition: service_healthy
        restart: true
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - FRONTEND_HOST=${FRONTEND_HOST?Variable not set}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - SENTRY_DSN=${SENTRY_DSN}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_REGION=${S3_REGION}
      - S3_BUCKET=${S3_BUCKET}

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/" ]
      interval: 10s
      timeout: 5s
      retries: 5

    build:
      context: ./backend
    command:
      - fastapi
      - run
      - "app/main.py"

  frontend:
    image: '${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}'
    restart: always
    ports:
      - "5173:80"
    depends_on:
      - backend
    networks:
      - default
    build:
      context: ./frontend
      args:
        - VITE_API_URL=http://backend:8000
        - NODE_ENV=production
    
volumes:
  app-db-data:
  app-minio-data:

